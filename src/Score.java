import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvValidationException;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The {@code Score} class is responsible for computing and managing the score of a player based on their
 * game performance. It includes methods to compute the score, convert the score and player information
 * to string format, and export this data to a CSV file.
 */

public class Score {
   private String name;
   private int QuestionsCorrect;
   private int timetaken;
   private int lives;
   private int score;
   private int roomsCompleted;
   /**
    * Constructs a {@code Score} object using information from a {@code Player} object.
    *
    * @param player1 The {@code Player} object from which to extract game performance information.
    */

   public Score(Player player1) {
	this.name = player1.getName();
	this.QuestionsCorrect = player1.getQuestionsAnswered();
	this.timetaken = player1.getTotaltime();
	this.lives = player1.getLives();
	this.roomsCompleted = player1.getRoom();
	
	   
   }
   /**
    * Computes the score for the player based on the number of questions answered correctly,
    * time taken, and lives remaining. The formula for score computation is defined within the method.
    *
    * @return The computed score of the player.
    */

   public int computeScore() {
	   float tt = timetaken;
	   float lv = lives;
	   float qn = QuestionsCorrect;
	   float cas =  ((qn / 25) * 70);
	   float time_score =  ((1 - ((tt - 5) / 50)) * 20);	
	  
	   float lrs = (lv / 3) * 10;
	   score =  (int) (cas + time_score + lrs);
	   System.out.println(time_score +  " " + lrs);
	   return score;	   
   }
   /**
    * Returns a string representation of the player's name, computed score, and time taken.
    * This string is formatted for CSV output.
    *
    * @return A CSV-formatted string containing the player's name, score, and time taken.
    */
   
   public String toString() {
		return name + "," + this.computeScore() + "," + timetaken;
	}
   /**
    * Returns a more detailed string representation of the player's game performance, including
    * name, computed score, time taken, rooms completed, and lives remaining.
    * This string is formatted for CSV output.
    *
    * @return A CSV-formatted string containing detailed player performance information.
    */

   public String toString2() {
		return name + "," + this.computeScore() + "," + timetaken + "," + roomsCompleted + "," + lives;
	}
   /**
    * Exports a given string to a CSV file at the specified file path. The method appends
    * the string to the file, allowing for the accumulation of player data.
    *
    * @param toString The string to be exported, typically generated by {@code toString()} or {@code toString2()}.
    * @param filePath The file path of the CSV file to which the data should be exported.
    */

   public static void exportPlayerToCSV(String toString, String filePath) {
       try (CSVWriter writer = new CSVWriter(new FileWriter(filePath, true))) {
    	   String[] playerData = {toString};
    	   if (!playerData[0].split(",")[0].equalsIgnoreCase("gameMod")) {
        	   writer.writeNext(playerData);
    	   }
           //String[] playerData = {toString};
           System.out.println(playerData);
           //writer.writeNext(playerData);
           System.out.println("Player data exported to CSV successfully.");
       } catch (IOException e) {
           System.err.println("An error occurred while writing to CSV: " + e.getMessage());
       }
   }
   /**
    * Removes data from a CSV file that matches a given name.
    * 
    * @param name The name to match in the CSV file. Rows with this name will be removed.
    * @throws CsvValidationException If there is an error validating the CSV content.
    * 
    * The method reads an existing CSV file named 'incomplete.csv' and filters out
    * any rows where the first cell (when split by comma) matches the given name or
    * is equal to "gamemod" (case-insensitive). It then writes the filtered data back
    * to the same CSV file.
    * 
    * There are two main steps in this process:
    * 1. Read and filter data: The method reads the CSV file line by line and adds
    *    each line that does not match the criteria to a list of string arrays.
    * 2. Write the filtered data back: The method writes the list of filtered data
    *    back to the CSV file, effectively removing the matched rows.
    * 
    * If an IOException occurs during reading or writing, an error message is printed
    * to the standard error stream and the method exits early.
    */
   public static void removeDataFromCSV(String name) throws CsvValidationException {
       List<String[]> filteredData = new ArrayList<>();
       
       // Step 1: Read and filter data
       try (CSVReader reader = new CSVReader(new FileReader("./incomplete.csv"))) {
           String[] nextLine;
           
           while ((nextLine = reader.readNext()) != null) {
               if (nextLine[0].split(",").length>0 && !nextLine[0].split(",")[0].equalsIgnoreCase(name) && !nextLine[0].split(",")[0].equalsIgnoreCase("gamemod")) {
                   filteredData.add(nextLine);
               }
           }
       } catch (IOException e) {
           System.err.println("An error occurred while reading the CSV: " + e.getMessage());
           return;
       }
       
       // Step 2: Write the filtered data back
       try (CSVWriter writer = new CSVWriter(new FileWriter("./incomplete.csv"))) {
           writer.writeAll(filteredData);
       } catch (IOException e) {
           System.err.println("An error occurred while writing to CSV: " + e.getMessage());
       }
   }
}

